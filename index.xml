<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://pyg.org/index.xml" rel="self" type="application/atom+xml" /><link href="http://pyg.org/" rel="alternate" type="text/html" /><updated>2021-09-27T06:49:12+00:00</updated><id>http://pyg.org/index.xml</id><entry><title type="html">GraphGym &amp;amp; PyG Integration</title><link href="http://pyg.org/GraphGym-PyG-integration" rel="alternate" type="text/html" title="GraphGym &amp;amp; PyG Integration" /><published>2021-09-14T15:00:00+00:00</published><updated>2021-09-14T15:00:00+00:00</updated><id>http://pyg.org/GraphGym-PyG-integration</id><content type="html" xml:base="http://pyg.org/GraphGym-PyG-integration">&lt;p&gt;&lt;strong&gt;GraphGym&lt;/strong&gt; is a platform for &lt;strong&gt;designing and evaluating Graph Neural
Networks (GNNs)&lt;/strong&gt;, as originally proposed in the &lt;a href=&quot;https://arxiv.org/abs/2011.08843&quot;&gt;“Design Space for
Graph Neural Networks”&lt;/a&gt; paper. &lt;strong&gt;We now
officially support GraphGym as part of of PyG.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are continuously working on better and deeper GraphGym integration with PyG. We highly welcome any contribution or feedback!&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Highly modularized pipeline for GNN:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Data:&lt;/strong&gt; Data loading and data splitting&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Model:&lt;/strong&gt; Modularized GNN implementations&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Tasks:&lt;/strong&gt; Node-level, edge-level and graph-level tasks&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Evaluation:&lt;/strong&gt; Accuracy, ROC AUC, …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reproducible experiment configuration:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Each experiment is &lt;em&gt;fully described by a configuration file&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scalable experiment management:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Easily launch &lt;em&gt;thousands of GNN experiments in parallel&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Auto-generate&lt;/em&gt; experiment analyses and figures across random
seeds and experiments&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flexible user customization:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Easily &lt;em&gt;register your own modules&lt;/em&gt;, such as data loaders, GNN
layers, loss functions, etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-graphgym&quot;&gt;Why GraphGym?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; GraphGym is great for GNN beginners, domain experts and GNN
researchers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario 1:&lt;/strong&gt; You are a beginner to graph representation learning and
want to understand how GNNs work:&lt;/p&gt;

&lt;p&gt;You probably have read many exciting papers on GNNs, and try to write
your own GNN implementation. Even if using raw PyG, you still have to
code up the essential pipeline on your own. GraphGym is a perfect place
for your to start learning about &lt;em&gt;standardized GNN implementation and
evaluation&lt;/em&gt;.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;img align=&quot;center&quot; src=&quot;https://pytorch-geometric.readthedocs.io/en/latest/_images/graphgym_design_space.png&quot; width=&quot;400px&quot; /&gt;
  &lt;b&gt;&lt;br /&gt;Figure 1: Modularized GNN implementation.&lt;/b&gt; 
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario 2:&lt;/strong&gt; You want to apply GNNs to your exciting application:&lt;/p&gt;

&lt;p&gt;You probably know that there are hundreds of possible GNN models, and
selecting the best model is notoriously hard. Even worse, the &lt;a href=&quot;https://arxiv.org/abs/2011.08843&quot;&gt;GraphGym
paper&lt;/a&gt; shows that the best GNN designs
for different tasks differ drastically. GraphGym provides a &lt;em&gt;simple
interface to try out thousands of GNNs in parallel&lt;/em&gt; and understand the
best designs for your specific task. GraphGym also recommends a “go-to”
GNN design space, after investigating 10 million GNN model-task
combinations.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;img align=&quot;center&quot; src=&quot;https://github.com/snap-stanford/GraphGym/raw/master/docs/rank.png&quot; width=&quot;1000px&quot; /&gt;
  &lt;b&gt;&lt;br /&gt;Figure 2: A guideline for desirable GNN design choices.&lt;/b&gt; &lt;br /&gt;(Sampling from 10 million GNN model-task combinations.) 
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario 3:&lt;/strong&gt; You are a GNN researcher, who wants to innovate new GNN
models or propose new GNN tasks:&lt;/p&gt;

&lt;p&gt;Say you have proposed a new GNN layer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExampleConv&lt;/code&gt;. GraphGym can help you
convincingly argue that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExampleConv&lt;/code&gt; is better than, &lt;em&gt;e.g.&lt;/em&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GCNConv&lt;/code&gt;: When randomly sampling from 10
million possible model-task combinations, how often will &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExampleConv&lt;/code&gt; outperform &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GCNConv&lt;/code&gt; when everything else
is fixed (including computational costs)? Moreover, GraphGym can help
you easily do hyper-parameter search, and &lt;em&gt;visualize&lt;/em&gt; what design
choices are better. In sum, GraphGym can greatly facilitate your GNN
research.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
  &lt;img align=&quot;center&quot; src=&quot;https://github.com/snap-stanford/GraphGym/raw/master/docs/evaluation.png&quot; width=&quot;1000px&quot; /&gt;
  &lt;b&gt;&lt;br /&gt;Figure 3: Evaluation of a given GNN design dimension&lt;/b&gt;, e.g., BatchNorm 
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;graphgym-quick-start&quot;&gt;GraphGym Quick start&lt;/h2&gt;

&lt;p&gt;After properly &lt;a href=&quot;#installation&quot;&gt;installing&lt;/a&gt; PyG, you can try out our GraphGym API to easily manage and launch GNN experiments.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pyg &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; pyg &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge  &lt;span class=&quot;c&quot;&gt;# Install PyG&lt;/span&gt;
git clone https://github.com/pyg-team/pytorch_geometric.git  &lt;span class=&quot;c&quot;&gt;# Get GraphGym pipeline&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pytorch_geometric/graphgym
bash run_single.sh  &lt;span class=&quot;c&quot;&gt;# run a single GNN experiment (node/edge/graph-level)&lt;/span&gt;
bash run_batch.sh  &lt;span class=&quot;c&quot;&gt;# run a batch of GNN experiments, with differnt GNN designs/datasets/tasks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please find detailed documentation in our PyG &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/notes/graphgym.html#basic-usage&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">GraphGym is a platform for designing and evaluating Graph Neural Networks (GNNs), as originally proposed in the “Design Space for Graph Neural Networks” paper. We now officially support GraphGym as part of of PyG.</summary></entry><entry><title type="html">Stanford Graph Learning Workshop 2021</title><link href="http://pyg.org/stanford-graph-learning-workshop" rel="alternate" type="text/html" title="Stanford Graph Learning Workshop 2021" /><published>2021-09-12T15:30:00+00:00</published><updated>2021-09-12T15:30:00+00:00</updated><id>http://pyg.org/stanford-graph-learning-workshop</id><content type="html" xml:base="http://pyg.org/stanford-graph-learning-workshop">&lt;p&gt;Stanford Graph Learning Workshop will be held on Thursday, Sept 16 2021. 
The workshop brings together leaders from academia and industry to showcase recent methodological advances of Graph Neural Networks, including talks about our new PyG 2.0 release. 
Please find more details on the workshop &lt;strong&gt;&lt;a href=&quot;https://snap.stanford.edu/graphlearning-workshop/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.
Free registration &lt;strong&gt;&lt;a href=&quot;https://www.eventbrite.com/e/stanford-graph-learning-workshop-tickets-167490286957&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.
Welcome to attend!&lt;/p&gt;</content><author><name></name></author><summary type="html">Stanford Graph Learning Workshop will be held on Thursday, Sept 16 2021. The workshop brings together leaders from academia and industry to showcase recent methodological advances of Graph Neural Networks, including talks about our new PyG 2.0 release. Please find more details on the workshop here. Free registration here. Welcome to attend!</summary></entry><entry><title type="html">PyG 2.0 Released</title><link href="http://pyg.org/PyG2.0-released" rel="alternate" type="text/html" title="PyG 2.0 Released" /><published>2021-09-12T15:00:00+00:00</published><updated>2021-09-12T15:00:00+00:00</updated><id>http://pyg.org/PyG2.0-released</id><content type="html" xml:base="http://pyg.org/PyG2.0-released">&lt;p&gt;&lt;strong&gt;PyG&lt;/strong&gt; &lt;em&gt;(PyTorch Geometric)&lt;/em&gt; has been moved from the personal account &lt;a href=&quot;https://github.com/rusty1s&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rusty1s&lt;/code&gt;&lt;/a&gt; to its own organization account &lt;a href=&quot;https://github.com/pyg-team&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyg-team&lt;/code&gt;&lt;/a&gt; to emphasize the ongoing collaboration between TU Dortmund University, Stanford University and many great external contributors.
With this, we are releasing &lt;strong&gt;PyG 2.0&lt;/strong&gt;, a new major release that brings sophisticated &lt;a href=&quot;#heterogeneous-graph-support&quot;&gt;&lt;strong&gt;heterogeneous graph support&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;#managing-experiments-with-graphgym&quot;&gt;&lt;strong&gt;GraphGym&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;#additional-features&quot;&gt;&lt;strong&gt;many other exciting features&lt;/strong&gt;&lt;/a&gt; to PyG.&lt;/p&gt;

&lt;h2 id=&quot;heterogeneous-graph-support&quot;&gt;Heterogeneous Graph Support&lt;/h2&gt;

&lt;p&gt;We finally provide full &lt;strong&gt;heterogeneous graph support&lt;/strong&gt; in PyG 2.0.
See &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/notes/heterogeneous.html&quot;&gt;here&lt;/a&gt; for the accompanying tutorial.&lt;/p&gt;

&lt;h3 id=&quot;highlights&quot;&gt;Highlights&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Heterogeneous Graph Storage:&lt;/strong&gt; Heterogeneous graphs can now be stored in their own dedicated &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData&quot;&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.HeteroData&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; class (thanks to @&lt;a href=&quot;https://github.com/yaoyaowd&quot;&gt;yaoyaowd&lt;/a&gt;):
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch_geometric.data&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeteroData&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeteroData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create two node types &quot;paper&quot; and &quot;author&quot; holding a single feature matrix:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'paper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_papers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_paper_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_authors_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create an edge type (&quot;paper&quot;, &quot;written_by&quot;, &quot;author&quot;) holding its graph connectivity:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'paper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'written_by'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [2, num_edges]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.HeteroData&lt;/code&gt;&lt;/a&gt; behaves similar to a regular homgeneous &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.Data&lt;/code&gt;&lt;/a&gt; object:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'paper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'paper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'written_by'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'author'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cuda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Heterogeneous Mini-Batch Loading:&lt;/strong&gt; Heterogeneous graphs can be converted to mini-batches for many small and single giant graphs via the &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.DataLoader&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader.DataLoader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.NeighborLoader&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader.NeighborLoader&lt;/code&gt;&lt;/a&gt; loaders, respectively.
These loaders can now handle both homogeneous and heterogeneous graphs:
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch_geometric.loader&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heterogeneous_graph_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch_geometric.loader&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NeighborLoader&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NeighborLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heterogeneous_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_neighbors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;input_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'paper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'paper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Heterogeneous Graph Neural Networks:&lt;/strong&gt; Heterogeneous GNNs can now easily be created from homogeneous ones via &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.to_hetero_transformer.to_hetero&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.to_hetero&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.to_hetero_with_bases_transformer.to_hetero_with_bases&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.to_hetero_with_bases&lt;/code&gt;&lt;/a&gt;.
These processes take an existing GNN model and duplicate their message functions to account for different node and edge types:
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch_geometric.nn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAGEConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_hetero&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GNN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAGEConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAGEConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GNN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden_channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_hetero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p align=&quot;center&quot;&gt;
  &lt;img height=&quot;400px&quot; src=&quot;https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/docs/source/_figures/to_hetero.svg?sanitize=true&quot; /&gt;
&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;additional-features&quot;&gt;Additional Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/notes/heterogeneous.html&quot;&gt;heterogeneous graph tutorial&lt;/a&gt; describing all newly released features (thanks to @&lt;a href=&quot;https://github.com/mrjel&quot;&gt;mrjel&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;A variety of &lt;a href=&quot;https://github.com/rusty1s/pytorch_geometric/tree/master/examples/hetero&quot;&gt;heterogeneous GNN examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Support for lazy initialization of GNN operators by passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in_channels&lt;/code&gt; argument (implemented via &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.dense.Linear&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.dense.Linear&lt;/code&gt;&lt;/a&gt;).
This allows to avoid calculating and keeping track of input tensor sizes, simplyfing the creation of heterogeneous graph models with varying feature dimensionalities across different node and edge types.
Lazy initialization is supported for all existing PyG operators (thanks to @&lt;a href=&quot;https://github.com/yaoyaowd&quot;&gt;yaoyaowd&lt;/a&gt;):
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch_geometric.nn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GATConv&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GATConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;# We can initialize the model’s parameters by calling it once:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HeteroConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.HeteroConv&lt;/code&gt;&lt;/a&gt;: A generic wrapper for computing graph convolution on heterogeneous graphs (thanks to @&lt;a href=&quot;https://github.com/RexYing&quot;&gt;RexYing&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HGTConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.HGTConv&lt;/code&gt;&lt;/a&gt;: The heterogeneous graph transformer operator from the &lt;a href=&quot;https://arxiv.org/abs/2003.01332&quot;&gt;“Heterogeneous Graph Transformer”&lt;/a&gt; paper&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.HGTLoader&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader.HGTLoader&lt;/code&gt;&lt;/a&gt;: The heterogeneous graph sampler from the &lt;a href=&quot;https://arxiv.org/abs/2003.01332&quot;&gt;“Heterogeneous Graph Transformer”&lt;/a&gt; paper for learning on large-scale heterogeneous graphs (thanks to @&lt;a href=&quot;https://github.com/chantat&quot;&gt;chantat&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Support for heterogeneous graph transformations in &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.AddSelfLoops&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.AddSelfLoops&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.ToSparseTensor&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.ToSparseTensor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.NormalizeFeatures&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.NormalizeFeatures&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.ToUndirected&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.ToUndirected&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;New heterogeneous graph datasets: &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.OGB_MAG&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets.OGB_MAG&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.IMDB&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets.IMDB&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.DBLP&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets.DBLP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.LastFM&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets.LastFM&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Support for converting heterogeneous graphs to “typed” homogeneous ones via &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData.to_homogeneous&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.HeteroData.to_homogeneous&lt;/code&gt;&lt;/a&gt; (thanks to @&lt;a href=&quot;https://github.com/yzhao062&quot;&gt;yzhao062&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/notes/load_csv.html&quot;&gt;tutorial&lt;/a&gt; on creating a &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.HeteroData&lt;/code&gt;&lt;/a&gt; object from raw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.csv&lt;/code&gt; files (thanks to @&lt;a href=&quot;https://github.com/yaoyaowd&quot;&gt;yaoyaowd&lt;/a&gt; and @&lt;a href=&quot;https://github.com/mrjel&quot;&gt;mrjel&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://github.com/rusty1s/pytorch_geometric/blob/master/examples/pytorch_lightning/relational_gnn.py&quot;&gt;example&lt;/a&gt; to scale heterogeneous graph models via &lt;a href=&quot;https://www.pytorchlightning.ai/&quot;&gt;PyTorch Lightning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;managing-experiments-with-graphgym&quot;&gt;Managing Experiments with GraphGym&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphGym&lt;/strong&gt; is now officially supported in PyG 2.0 via &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/graphgym.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch_geometric.graphgym&lt;/code&gt;&lt;/a&gt;.
See &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/notes/graphgym.html&quot;&gt;here&lt;/a&gt; for the accompanying tutorial.
Overall, GraphGym is a platform for designing and evaluating Graph Neural Networks from configuration files via a highly modularized pipeline (thanks to @&lt;a href=&quot;https://github.com/JiaxuanYou&quot;&gt;JiaxuanYou&lt;/a&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;GraphGym is the perfect place to start learning about &lt;em&gt;standardized GNN implementation and evaluation&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;GraphGym provides a &lt;em&gt;simple interface to try out thousands of GNN architectures in parallel&lt;/em&gt; to find the best design for your specific task&lt;/li&gt;
  &lt;li&gt;GraphGym lets you easily do &lt;em&gt;hyper-parameter search&lt;/em&gt; and &lt;em&gt;visualize what design choices are better&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/docs/source/_figures/graphgym_results.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.AMiner&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets.AMiner&lt;/code&gt;&lt;/a&gt; dataset now returns a &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.HeteroData&lt;/code&gt;&lt;/a&gt; object. See &lt;a href=&quot;https://github.com/rusty1s/pytorch_geometric/blob/master/examples/hetero/metapath2vec.py&quot;&gt;here&lt;/a&gt; for our updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MetaPath2Vec&lt;/code&gt; example on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMiner&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.AddTrainValTestMask&lt;/code&gt; has been replaced in favour of &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RandomNodeSplit&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.RandomNodeSplit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Since the storage layout of &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.Data&lt;/code&gt;&lt;/a&gt; significantly changed in order to support heterogenous graphs, already processed datasets need to be re-processed by deleting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root/processed&lt;/code&gt; folder.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__cat_dim__&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.Data.__cat_dim__&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__inc__&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.Data.__inc__&lt;/code&gt;&lt;/a&gt; now expect additional input arguments:
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__cat_dim__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__inc__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;In case you modified &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__cat_dim__&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__cat_dim__&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__inc__&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__inc__&lt;/code&gt;&lt;/a&gt; functionality in a customized &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.Data&lt;/code&gt;&lt;/a&gt; object, please ensure to apply the above changes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deprecations&quot;&gt;Deprecations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PointConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.PointConv&lt;/code&gt;&lt;/a&gt; is deprecated in favour of &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PointNetConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.PointNetConv&lt;/code&gt;&lt;/a&gt; (thanks to @lelouedec and @QuanticDisaster)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.train_test_split_edges&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utils.train_test_split_edges&lt;/code&gt;&lt;/a&gt; is deprecated in favour of the new &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RandomLinkSplit&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.RandomLinkSplit&lt;/code&gt;&lt;/a&gt; transform&lt;/li&gt;
  &lt;li&gt;All data loaders were moved from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch_geometric.data&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch_geometric.loader&lt;/code&gt;, &lt;em&gt;e.g.&lt;/em&gt;:
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch_geometric.loader&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.NeighborSampler&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader.NeighborSampler&lt;/code&gt;&lt;/a&gt; is deprecated in favour of &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.NeighborLoader&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loader.NeighborLoader&lt;/code&gt;&lt;/a&gt; in order to simplify the application of neighbor sampling and to support both neighbor sampling in homogeneous and heterogeneous graphs&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data.contains_isolated_nodes&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data.contains_self_loops&lt;/code&gt; are deprecated in favour of &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.has_isolated_nodes&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data.has_isolated_nodes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.has_self_loops&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data.has_self_loops&lt;/code&gt;&lt;/a&gt;, respectively&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-features-1&quot;&gt;Additional Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rusty1s/pytorch_scatter&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch-scatter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/rusty1s/pytorch_sparse&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch-sparse&lt;/code&gt;&lt;/a&gt; now support half-precision computation via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.half&lt;/code&gt;, bringing half-precision support to PyG&lt;/li&gt;
  &lt;li&gt;Added a &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/notes/cheatsheet.html&quot;&gt;GNN cheatsheet&lt;/a&gt; to the documentation, which lets you more easily choose a GNN operator for your specific need&lt;/li&gt;
  &lt;li&gt;Added the &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RandomLinkSplit&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.RandomLinkSplit&lt;/code&gt;&lt;/a&gt; transform to easily perform a random edge-level random split (thanks to @RexXing)&lt;/li&gt;
  &lt;li&gt;Added the &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/profile.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch_geometric.profile&lt;/code&gt;&lt;/a&gt; package which provides a variety of utility functions for benchmarking runtimes and memory consumptions of GNN models (thanks to @&lt;a href=&quot;https://github.com/yzhao062&quot;&gt;yzhao062&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.MessagePassing&lt;/code&gt;&lt;/a&gt; now supports hooks for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;propagate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aggregate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; functions, &lt;em&gt;e.g.&lt;/em&gt; via &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing.register_propagate_forward_pre_hook&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.MessagePassing.register_propagate_forward_hook&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Added the &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GeneralConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.GeneralConv&lt;/code&gt;&lt;/a&gt; operator that can handle most GNN use-cases (&lt;em&gt;e.g.&lt;/em&gt;, w/ or w/o edge features, …) and has enough design options to be tuned (&lt;em&gt;e.g.&lt;/em&gt;, attention, skip-connections, …) (thanks to @&lt;a href=&quot;https://github.com/JiaxuanYou&quot;&gt;JiaxuanYou&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added the &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.RECT_L&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models.RECT_L&lt;/code&gt;&lt;/a&gt; model for learning with completely-imbalanced labels (thanks to @Fizyhsp)&lt;/li&gt;
  &lt;li&gt;Added the Pathfinder Discovery Network Convolutional operator &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PDNConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.PDNConv&lt;/code&gt;&lt;/a&gt; (thanks to @benedekrozemberczki)&lt;/li&gt;
  &lt;li&gt;Added basic GNN model support as part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models&lt;/code&gt; package, &lt;em&gt;e.g.&lt;/em&gt;, &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GCN&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.model.GCN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GraphSAGE&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models.GraphSAGE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GAT&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models.GAT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GIN&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models.GIN&lt;/code&gt;&lt;/a&gt;. Pre-defined models support customizing hidden feature dimensionality, number of layers, activation, normalization and jumping knowledge (thanks to @PabloAMC)&lt;/li&gt;
  &lt;li&gt;Added the &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.MD17&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets.MD17&lt;/code&gt;&lt;/a&gt; datasets (thanks to @M-R-Schaefer)&lt;/li&gt;
  &lt;li&gt;Added a link-prediction &lt;a href=&quot;https://github.com/rusty1s/pytorch_geometric/blob/master/examples/rgcn_link_pred.py&quot;&gt;example&lt;/a&gt; of &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.RGCNConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.RGCNConv&lt;/code&gt;&lt;/a&gt;  (thanks to @moritzblum)&lt;/li&gt;
  &lt;li&gt;Added an &lt;a href=&quot;https://github.com/rusty1s/pytorch_geometric/blob/master/examples/mem_pool.py&quot;&gt;example&lt;/a&gt; of &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.MemPooling&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.pool.MemPooling&lt;/code&gt;&lt;/a&gt; (thanks to @wsad1)&lt;/li&gt;
  &lt;li&gt;Added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_attention_weights&lt;/code&gt; argument for &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.TransformerConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.TransformerConv&lt;/code&gt;&lt;/a&gt; (thanks to @wsad1)&lt;/li&gt;
  &lt;li&gt;Batch support for &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.homophily&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utils.homophily&lt;/code&gt;&lt;/a&gt; (thanks to @wsad1)&lt;/li&gt;
  &lt;li&gt;Added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;batch_size&lt;/code&gt; argument to &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.to_dense_batch&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utils.to_dense_batch&lt;/code&gt;&lt;/a&gt; (thanks to @jimmiebtlr)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;minor-changes&quot;&gt;Minor Changes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Heavily improved loading times of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import torch_geometric&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.sequential.Sequential&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.Sequential&lt;/code&gt;&lt;/a&gt; is now fully jittable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.LEConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.LEConv&lt;/code&gt;&lt;/a&gt; is now fully jittable (thanks to @lucagrementieri)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GENConv&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.GENConv&lt;/code&gt;&lt;/a&gt; can now make use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;add&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;mean&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;max&quot;&lt;/code&gt; aggregations (thanks to @riskiem)&lt;/li&gt;
  &lt;li&gt;Attributes of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.nn.utils.rnn.PackedSequence&lt;/code&gt; are now correctly handled by &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.Data&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.HeteroData&lt;/code&gt;&lt;/a&gt; (thanks to @WuliangHuang)&lt;/li&gt;
  &lt;li&gt;Added support for &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.record_stream&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.record_stream()&lt;/code&gt;&lt;/a&gt; in order to allow for data prefetching (thanks to @FarzanT)&lt;/li&gt;
  &lt;li&gt;Added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_num_neighbors&lt;/code&gt; attribute to &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.SchNet&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models.SchNet&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.DimeNet&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models.DimeNet&lt;/code&gt;&lt;/a&gt; (thanks to @nec4)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.conv.MessagePassing&lt;/code&gt;&lt;/a&gt; is now jittable in case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aggregate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; return multiple arguments (thanks to @PhilippThoelke)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.from_networkx&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utils.from_networkx&lt;/code&gt;&lt;/a&gt; now supports grouping of node-level and edge-level features (thanks to @PabloAMC)&lt;/li&gt;
  &lt;li&gt;Transforms now inherit from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.BaseTransform&lt;/code&gt; to ease type checking (thanks to @CCInc)&lt;/li&gt;
  &lt;li&gt;Added support for the deletion of data attributes via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;del data[key]&lt;/code&gt; (thanks to @Linux-cpp-lisp)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.LinearTransformation&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.LinearTransformation&lt;/code&gt;&lt;/a&gt; transform now correctly transposes the input matrix before applying the transformation (thanks to @beneisner)&lt;/li&gt;
  &lt;li&gt;Fixed a bug in &lt;a href=&quot;https://github.com/rusty1s/pytorch_geometric/tree/master/benchmark/kernel&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;benchmark/kernel&lt;/code&gt;&lt;/a&gt; that prevented the application of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiffPool&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMDB-BINARY&lt;/code&gt; dataset (thanks to @dongZheX)&lt;/li&gt;
  &lt;li&gt;Feature dimensionalities of &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.WikipediaNetwork&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets.WikipediaNetwork&lt;/code&gt;&lt;/a&gt; do now match which the official reported ones in case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geom_gcn_preprocess=True&lt;/code&gt; (thanks to @ZhuYun97 and @GitEventhandler)&lt;/li&gt;
  &lt;li&gt;Fixed a bug in the &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.DynamicFAUST&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets.DynamicFAUST&lt;/code&gt;&lt;/a&gt; dataset in which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.num_nodes&lt;/code&gt; was undefined (thanks to @koustav123)&lt;/li&gt;
  &lt;li&gt;Fixed a bug in which &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models.GNNExplainer&lt;/code&gt;&lt;/a&gt; could not handle GNN operators that add self-loops to the graph in case self-loops were already present (thanks to @tw200464tw and @NithyaBhasker)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.LayerNorm&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.norm.LayerNorm&lt;/code&gt;&lt;/a&gt; may no longer produce NaN gradients (thanks to @fbragman)&lt;/li&gt;
  &lt;li&gt;Fixed a bug in which it was not possible to customize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;networkx&lt;/code&gt; drawing arguments in &lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer.visualize_subgraph&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.models.GNNExplainer.visualize_subgraph()&lt;/code&gt;&lt;/a&gt; (thanks to @jvansan)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RemoveIsolatedNodes&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transforms.RemoveIsolatedNodes&lt;/code&gt;&lt;/a&gt; now correctly removes isolated nodes in case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.num_nodes&lt;/code&gt; is explicitely set (thanks to @blakechi)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">PyG (PyTorch Geometric) has been moved from the personal account rusty1s to its own organization account pyg-team to emphasize the ongoing collaboration between TU Dortmund University, Stanford University and many great external contributors. With this, we are releasing PyG 2.0, a new major release that brings sophisticated heterogeneous graph support, GraphGym and many other exciting features to PyG.</summary></entry></feed>